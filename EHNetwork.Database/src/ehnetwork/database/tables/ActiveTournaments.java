/**
 * This class is generated by jOOQ
 */
package ehnetwork.database.tables;

import ehnetwork.database.Account;
import ehnetwork.database.Keys;
import ehnetwork.database.tables.records.ActiveTournamentsRecord;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.5.2"
	},
	comments = "This class is generated by jOOQ"
)
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActiveTournaments extends org.jooq.impl.TableImpl<ActiveTournamentsRecord> implements java.io.Serializable, java.lang.Cloneable {

	private static final long serialVersionUID = 1981348090;

	/**
	 * The reference instance of <code>Account.activeTournaments</code>
	 */
	public static final ActiveTournaments activeTournaments = new ActiveTournaments();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<ActiveTournamentsRecord> getRecordType() {
		return ActiveTournamentsRecord.class;
	}

	/**
	 * The column <code>Account.activeTournaments.name</code>.
	 */
	public final org.jooq.TableField<ActiveTournamentsRecord, java.lang.String> name = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>Account.activeTournaments.start_date</code>.
	 */
	public final org.jooq.TableField<ActiveTournamentsRecord, java.sql.Date> start_date = createField("start_date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

	/**
	 * The column <code>Account.activeTournaments.end_date</code>.
	 */
	public final org.jooq.TableField<ActiveTournamentsRecord, java.sql.Date> end_date = createField("end_date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

	/**
	 * The column <code>Account.activeTournaments.is_gamemode</code>.
	 */
	public final org.jooq.TableField<ActiveTournamentsRecord, java.lang.Integer> is_gamemode = createField("is_gamemode", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>Account.activeTournaments.server_id</code>.
	 */
	public final org.jooq.TableField<ActiveTournamentsRecord, org.jooq.types.UByte> server_id = createField("server_id", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "");

	/**
	 * Create a <code>Account.activeTournaments</code> table reference
	 */
	public ActiveTournaments() {
		this("activeTournaments", null);
	}

	/**
	 * Create an aliased <code>Account.activeTournaments</code> table reference
	 */
	public ActiveTournaments(java.lang.String alias) {
		this(alias, ActiveTournaments.activeTournaments);
	}

	private ActiveTournaments(java.lang.String alias, org.jooq.Table<ActiveTournamentsRecord> aliased) {
		this(alias, aliased, null);
	}

	private ActiveTournaments(java.lang.String alias, org.jooq.Table<ActiveTournamentsRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, Account.Account, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<ActiveTournamentsRecord> getPrimaryKey() {
		return Keys.KEY_activeTournaments_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<ActiveTournamentsRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<ActiveTournamentsRecord>>asList(Keys.KEY_activeTournaments_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ActiveTournaments as(java.lang.String alias) {
		return new ActiveTournaments(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ActiveTournaments rename(java.lang.String name) {
		return new ActiveTournaments(name, null);
	}
}
